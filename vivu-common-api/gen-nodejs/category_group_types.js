//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof vv === 'undefined') {
  vv = {};
}
if (typeof vv.models === 'undefined') {
  vv.models = {};
}
vv.models.CategoryGroup = module.exports.CategoryGroup = function(args) {
  this.id = null;
  this.name = null;
  this.priority = null;
  this.notes = null;
  this.urlKey = null;
  this.metaDesc = null;
  this.status = null;
  this.createdAt = null;
  this.updatedAt = null;
  this.createdBy = null;
  this.updatedBy = null;
  this.coverImagePath = null;
  this.showPageHome = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.notes !== undefined && args.notes !== null) {
      this.notes = args.notes;
    }
    if (args.urlKey !== undefined && args.urlKey !== null) {
      this.urlKey = args.urlKey;
    }
    if (args.metaDesc !== undefined && args.metaDesc !== null) {
      this.metaDesc = args.metaDesc;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.updatedAt !== undefined && args.updatedAt !== null) {
      this.updatedAt = args.updatedAt;
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.updatedBy !== undefined && args.updatedBy !== null) {
      this.updatedBy = args.updatedBy;
    }
    if (args.coverImagePath !== undefined && args.coverImagePath !== null) {
      this.coverImagePath = args.coverImagePath;
    }
    if (args.showPageHome !== undefined && args.showPageHome !== null) {
      this.showPageHome = args.showPageHome;
    }
  }
};
vv.models.CategoryGroup.prototype = {};
vv.models.CategoryGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.notes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.urlKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.metaDesc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.updatedAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.updatedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.coverImagePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.showPageHome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.CategoryGroup.prototype.write = function(output) {
  output.writeStructBegin('CategoryGroup');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 3);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.STRING, 4);
    output.writeString(this.notes);
    output.writeFieldEnd();
  }
  if (this.urlKey !== null && this.urlKey !== undefined) {
    output.writeFieldBegin('urlKey', Thrift.Type.STRING, 5);
    output.writeString(this.urlKey);
    output.writeFieldEnd();
  }
  if (this.metaDesc !== null && this.metaDesc !== undefined) {
    output.writeFieldBegin('metaDesc', Thrift.Type.STRING, 6);
    output.writeString(this.metaDesc);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 8);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.updatedAt !== null && this.updatedAt !== undefined) {
    output.writeFieldBegin('updatedAt', Thrift.Type.STRING, 9);
    output.writeString(this.updatedAt);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 10);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.updatedBy !== null && this.updatedBy !== undefined) {
    output.writeFieldBegin('updatedBy', Thrift.Type.STRING, 11);
    output.writeString(this.updatedBy);
    output.writeFieldEnd();
  }
  if (this.coverImagePath !== null && this.coverImagePath !== undefined) {
    output.writeFieldBegin('coverImagePath', Thrift.Type.STRING, 12);
    output.writeString(this.coverImagePath);
    output.writeFieldEnd();
  }
  if (this.showPageHome !== null && this.showPageHome !== undefined) {
    output.writeFieldBegin('showPageHome', Thrift.Type.BOOL, 13);
    output.writeBool(this.showPageHome);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

