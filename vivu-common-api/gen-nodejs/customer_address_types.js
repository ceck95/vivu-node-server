//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof vv === 'undefined') {
  vv = {};
}
if (typeof vv.models === 'undefined') {
  vv.models = {};
}
vv.models.CustomerAddress = module.exports.CustomerAddress = function(args) {
  this.customerId = null;
  this.type = null;
  this.isDefault = null;
  this.fullName = null;
  this.phone = null;
  this.street = null;
  this.district = null;
  this.province = null;
  this.postalCode = null;
  this.countryCode = null;
  this.createdAt = null;
  this.updatedAt = null;
  this.createdBy = null;
  this.updatedBy = null;
  this.status = null;
  this.id = null;
  this.ward = null;
  this.customerName = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.isDefault !== undefined && args.isDefault !== null) {
      this.isDefault = args.isDefault;
    }
    if (args.fullName !== undefined && args.fullName !== null) {
      this.fullName = args.fullName;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.street !== undefined && args.street !== null) {
      this.street = args.street;
    }
    if (args.district !== undefined && args.district !== null) {
      this.district = args.district;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.postalCode !== undefined && args.postalCode !== null) {
      this.postalCode = args.postalCode;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.updatedAt !== undefined && args.updatedAt !== null) {
      this.updatedAt = args.updatedAt;
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.updatedBy !== undefined && args.updatedBy !== null) {
      this.updatedBy = args.updatedBy;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.ward !== undefined && args.ward !== null) {
      this.ward = args.ward;
    }
    if (args.customerName !== undefined && args.customerName !== null) {
      this.customerName = args.customerName;
    }
  }
};
vv.models.CustomerAddress.prototype = {};
vv.models.CustomerAddress.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.customerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isDefault = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fullName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.street = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.district = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.postalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.updatedAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.updatedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.ward = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.customerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.CustomerAddress.prototype.write = function(output) {
  output.writeStructBegin('CustomerAddress');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I32, 1);
    output.writeI32(this.customerId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.isDefault !== null && this.isDefault !== undefined) {
    output.writeFieldBegin('isDefault', Thrift.Type.BOOL, 3);
    output.writeBool(this.isDefault);
    output.writeFieldEnd();
  }
  if (this.fullName !== null && this.fullName !== undefined) {
    output.writeFieldBegin('fullName', Thrift.Type.STRING, 4);
    output.writeString(this.fullName);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 5);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.street !== null && this.street !== undefined) {
    output.writeFieldBegin('street', Thrift.Type.STRING, 6);
    output.writeString(this.street);
    output.writeFieldEnd();
  }
  if (this.district !== null && this.district !== undefined) {
    output.writeFieldBegin('district', Thrift.Type.STRING, 7);
    output.writeString(this.district);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 8);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.postalCode !== null && this.postalCode !== undefined) {
    output.writeFieldBegin('postalCode', Thrift.Type.STRING, 9);
    output.writeString(this.postalCode);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 10);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 11);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.updatedAt !== null && this.updatedAt !== undefined) {
    output.writeFieldBegin('updatedAt', Thrift.Type.STRING, 12);
    output.writeString(this.updatedAt);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 13);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.updatedBy !== null && this.updatedBy !== undefined) {
    output.writeFieldBegin('updatedBy', Thrift.Type.STRING, 14);
    output.writeString(this.updatedBy);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 15);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 16);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.ward !== null && this.ward !== undefined) {
    output.writeFieldBegin('ward', Thrift.Type.STRING, 17);
    output.writeString(this.ward);
    output.writeFieldEnd();
  }
  if (this.customerName !== null && this.customerName !== undefined) {
    output.writeFieldBegin('customerName', Thrift.Type.STRING, 18);
    output.writeString(this.customerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vv.models.CustomerAddressInsert = module.exports.CustomerAddressInsert = function(args) {
  this.customerId = null;
  this.type = null;
  this.isDefault = null;
  this.fullName = null;
  this.phone = null;
  this.street = null;
  this.ward = null;
  this.city = null;
  this.postalCode = null;
  this.countryCode = null;
  this.province = null;
  this.district = null;
  this.customerName = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.isDefault !== undefined && args.isDefault !== null) {
      this.isDefault = args.isDefault;
    }
    if (args.fullName !== undefined && args.fullName !== null) {
      this.fullName = args.fullName;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.street !== undefined && args.street !== null) {
      this.street = args.street;
    }
    if (args.ward !== undefined && args.ward !== null) {
      this.ward = args.ward;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.postalCode !== undefined && args.postalCode !== null) {
      this.postalCode = args.postalCode;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.district !== undefined && args.district !== null) {
      this.district = args.district;
    }
    if (args.customerName !== undefined && args.customerName !== null) {
      this.customerName = args.customerName;
    }
  }
};
vv.models.CustomerAddressInsert.prototype = {};
vv.models.CustomerAddressInsert.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.customerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isDefault = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fullName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.street = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.ward = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.postalCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.district = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.customerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.CustomerAddressInsert.prototype.write = function(output) {
  output.writeStructBegin('CustomerAddressInsert');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I32, 1);
    output.writeI32(this.customerId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.isDefault !== null && this.isDefault !== undefined) {
    output.writeFieldBegin('isDefault', Thrift.Type.BOOL, 3);
    output.writeBool(this.isDefault);
    output.writeFieldEnd();
  }
  if (this.fullName !== null && this.fullName !== undefined) {
    output.writeFieldBegin('fullName', Thrift.Type.STRING, 4);
    output.writeString(this.fullName);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 5);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.street !== null && this.street !== undefined) {
    output.writeFieldBegin('street', Thrift.Type.STRING, 6);
    output.writeString(this.street);
    output.writeFieldEnd();
  }
  if (this.ward !== null && this.ward !== undefined) {
    output.writeFieldBegin('ward', Thrift.Type.STRING, 7);
    output.writeString(this.ward);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 8);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.postalCode !== null && this.postalCode !== undefined) {
    output.writeFieldBegin('postalCode', Thrift.Type.STRING, 9);
    output.writeString(this.postalCode);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 10);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 11);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.district !== null && this.district !== undefined) {
    output.writeFieldBegin('district', Thrift.Type.STRING, 12);
    output.writeString(this.district);
    output.writeFieldEnd();
  }
  if (this.customerName !== null && this.customerName !== undefined) {
    output.writeFieldBegin('customerName', Thrift.Type.STRING, 13);
    output.writeString(this.customerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vv.models.CustomerAddressForm = module.exports.CustomerAddressForm = function(args) {
  this.type = null;
  this.isDefault = null;
  this.fullName = null;
  this.phone = null;
  this.street = null;
  this.ward = null;
  this.province = null;
  this.district = null;
  this.customerName = null;
  this.id = null;
  this.status = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.isDefault !== undefined && args.isDefault !== null) {
      this.isDefault = args.isDefault;
    }
    if (args.fullName !== undefined && args.fullName !== null) {
      this.fullName = args.fullName;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.street !== undefined && args.street !== null) {
      this.street = args.street;
    }
    if (args.ward !== undefined && args.ward !== null) {
      this.ward = args.ward;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.district !== undefined && args.district !== null) {
      this.district = args.district;
    }
    if (args.customerName !== undefined && args.customerName !== null) {
      this.customerName = args.customerName;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
vv.models.CustomerAddressForm.prototype = {};
vv.models.CustomerAddressForm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isDefault = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fullName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.street = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.ward = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.district = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.customerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.CustomerAddressForm.prototype.write = function(output) {
  output.writeStructBegin('CustomerAddressForm');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.isDefault !== null && this.isDefault !== undefined) {
    output.writeFieldBegin('isDefault', Thrift.Type.BOOL, 2);
    output.writeBool(this.isDefault);
    output.writeFieldEnd();
  }
  if (this.fullName !== null && this.fullName !== undefined) {
    output.writeFieldBegin('fullName', Thrift.Type.STRING, 3);
    output.writeString(this.fullName);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 4);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.street !== null && this.street !== undefined) {
    output.writeFieldBegin('street', Thrift.Type.STRING, 5);
    output.writeString(this.street);
    output.writeFieldEnd();
  }
  if (this.ward !== null && this.ward !== undefined) {
    output.writeFieldBegin('ward', Thrift.Type.STRING, 6);
    output.writeString(this.ward);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 7);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.district !== null && this.district !== undefined) {
    output.writeFieldBegin('district', Thrift.Type.STRING, 8);
    output.writeString(this.district);
    output.writeFieldEnd();
  }
  if (this.customerName !== null && this.customerName !== undefined) {
    output.writeFieldBegin('customerName', Thrift.Type.STRING, 9);
    output.writeString(this.customerName);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 10);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 11);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

