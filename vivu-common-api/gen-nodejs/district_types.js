//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof nexx === 'undefined') {
  nexx = {};
}
if (typeof nexx.shared === 'undefined') {
  nexx.shared = {};
}
nexx.shared.District = module.exports.District = function(args) {
  this.countryCode = null;
  this.provinceCode = null;
  this.districtCode = null;
  this.name = null;
  this.nameAscii = null;
  this.type = null;
  this.location = null;
  this.latitude = null;
  this.longitude = null;
  this.gisId = null;
  this.metadata = null;
  if (args) {
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field countryCode is unset!');
    }
    if (args.provinceCode !== undefined && args.provinceCode !== null) {
      this.provinceCode = args.provinceCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field provinceCode is unset!');
    }
    if (args.districtCode !== undefined && args.districtCode !== null) {
      this.districtCode = args.districtCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field districtCode is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.nameAscii !== undefined && args.nameAscii !== null) {
      this.nameAscii = args.nameAscii;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.gisId !== undefined && args.gisId !== null) {
      this.gisId = args.gisId;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
  }
};
nexx.shared.District.prototype = {};
nexx.shared.District.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.provinceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.districtCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.nameAscii = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.gisId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.District.prototype.write = function(output) {
  output.writeStructBegin('District');
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 1);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.provinceCode !== null && this.provinceCode !== undefined) {
    output.writeFieldBegin('provinceCode', Thrift.Type.STRING, 2);
    output.writeString(this.provinceCode);
    output.writeFieldEnd();
  }
  if (this.districtCode !== null && this.districtCode !== undefined) {
    output.writeFieldBegin('districtCode', Thrift.Type.STRING, 3);
    output.writeString(this.districtCode);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.nameAscii !== null && this.nameAscii !== undefined) {
    output.writeFieldBegin('nameAscii', Thrift.Type.STRING, 5);
    output.writeString(this.nameAscii);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 6);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 7);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.gisId !== null && this.gisId !== undefined) {
    output.writeFieldBegin('gisId', Thrift.Type.STRING, 10);
    output.writeString(this.gisId);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 11);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.shared.DistrictOption = module.exports.DistrictOption = function(args) {
  this.countryCode = null;
  this.provinceCode = null;
  this.districtCode = null;
  this.name = null;
  this.type = null;
  if (args) {
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field countryCode is unset!');
    }
    if (args.provinceCode !== undefined && args.provinceCode !== null) {
      this.provinceCode = args.provinceCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field provinceCode is unset!');
    }
    if (args.districtCode !== undefined && args.districtCode !== null) {
      this.districtCode = args.districtCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field districtCode is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
nexx.shared.DistrictOption.prototype = {};
nexx.shared.DistrictOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.provinceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.districtCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.DistrictOption.prototype.write = function(output) {
  output.writeStructBegin('DistrictOption');
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 1);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.provinceCode !== null && this.provinceCode !== undefined) {
    output.writeFieldBegin('provinceCode', Thrift.Type.STRING, 2);
    output.writeString(this.provinceCode);
    output.writeFieldEnd();
  }
  if (this.districtCode !== null && this.districtCode !== undefined) {
    output.writeFieldBegin('districtCode', Thrift.Type.STRING, 3);
    output.writeString(this.districtCode);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

