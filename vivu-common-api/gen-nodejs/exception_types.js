//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof nexx === 'undefined') {
  nexx = {};
}
if (typeof nexx.exceptions === 'undefined') {
  nexx.exceptions = {};
}
nexx.exceptions.DBException = module.exports.DBException = function(args) {
  this.code = null;
  this.message = null;
  this.uiMessage = null;
  this.constraint = null;
  this.table = null;
  this.schema = null;
  this.source = null;
  this.dataType = null;
  this.time = null;
  this.ipAddress = null;
  this.host = null;
  this.port = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.uiMessage !== undefined && args.uiMessage !== null) {
      this.uiMessage = args.uiMessage;
    }
    if (args.constraint !== undefined && args.constraint !== null) {
      this.constraint = args.constraint;
    }
    if (args.table !== undefined && args.table !== null) {
      this.table = args.table;
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = args.schema;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dataType !== undefined && args.dataType !== null) {
      this.dataType = args.dataType;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.ipAddress !== undefined && args.ipAddress !== null) {
      this.ipAddress = args.ipAddress;
    }
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
  }
};
nexx.exceptions.DBException.prototype = {};
nexx.exceptions.DBException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uiMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.constraint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.schema = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.dataType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.ipAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.port = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.exceptions.DBException.prototype.write = function(output) {
  output.writeStructBegin('DBException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.uiMessage !== null && this.uiMessage !== undefined) {
    output.writeFieldBegin('uiMessage', Thrift.Type.STRING, 3);
    output.writeString(this.uiMessage);
    output.writeFieldEnd();
  }
  if (this.constraint !== null && this.constraint !== undefined) {
    output.writeFieldBegin('constraint', Thrift.Type.STRING, 4);
    output.writeString(this.constraint);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 5);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRING, 6);
    output.writeString(this.schema);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 7);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dataType !== null && this.dataType !== undefined) {
    output.writeFieldBegin('dataType', Thrift.Type.STRING, 8);
    output.writeString(this.dataType);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.STRING, 9);
    output.writeString(this.time);
    output.writeFieldEnd();
  }
  if (this.ipAddress !== null && this.ipAddress !== undefined) {
    output.writeFieldBegin('ipAddress', Thrift.Type.STRING, 10);
    output.writeString(this.ipAddress);
    output.writeFieldEnd();
  }
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 11);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.STRING, 12);
    output.writeString(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.exceptions.DBExceptions = module.exports.DBExceptions = function(args) {
  Thrift.TException.call(this, "nexx.exceptions.DBExceptions")
  this.name = "nexx.exceptions.DBExceptions"
  this.errors = null;
  if (args) {
    if (args.errors !== undefined && args.errors !== null) {
      this.errors = Thrift.copyList(args.errors, [ttypes.DBException]);
    }
  }
};
Thrift.inherits(nexx.exceptions.DBExceptions, Thrift.TException);
nexx.exceptions.DBExceptions.prototype.name = 'DBExceptions';
nexx.exceptions.DBExceptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.errors = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.DBException();
          elem6.read(input);
          this.errors.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.exceptions.DBExceptions.prototype.write = function(output) {
  output.writeStructBegin('DBExceptions');
  if (this.errors !== null && this.errors !== undefined) {
    output.writeFieldBegin('errors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.errors.length);
    for (var iter7 in this.errors)
    {
      if (this.errors.hasOwnProperty(iter7))
      {
        iter7 = this.errors[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

