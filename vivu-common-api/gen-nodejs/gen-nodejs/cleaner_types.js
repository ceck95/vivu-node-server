//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof hc === 'undefined') {
  hc = {};
}
if (typeof hc.models === 'undefined') {
  hc.models = {};
}
hc.models.CleanerActivityInsert = module.exports.CleanerActivityInsert = function(args) {
  this.cleanerId = null;
  this.activity = null;
  this.createdAt = null;
  this.status = 1;
  if (args) {
    if (args.cleanerId !== undefined && args.cleanerId !== null) {
      this.cleanerId = args.cleanerId;
    }
    if (args.activity !== undefined && args.activity !== null) {
      this.activity = args.activity;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
hc.models.CleanerActivityInsert.prototype = {};
hc.models.CleanerActivityInsert.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cleanerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

hc.models.CleanerActivityInsert.prototype.write = function(output) {
  output.writeStructBegin('CleanerActivityInsert');
  if (this.cleanerId !== null && this.cleanerId !== undefined) {
    output.writeFieldBegin('cleanerId', Thrift.Type.STRING, 1);
    output.writeString(this.cleanerId);
    output.writeFieldEnd();
  }
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.I32, 2);
    output.writeI32(this.activity);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 4);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 5);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

hc.models.CleanerActivityForm = module.exports.CleanerActivityForm = function(args) {
  this.cleanerId = null;
  this.activity = null;
  this.createdAt = null;
  this.status = null;
  if (args) {
    if (args.cleanerId !== undefined && args.cleanerId !== null) {
      this.cleanerId = args.cleanerId;
    }
    if (args.activity !== undefined && args.activity !== null) {
      this.activity = args.activity;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
hc.models.CleanerActivityForm.prototype = {};
hc.models.CleanerActivityForm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cleanerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

hc.models.CleanerActivityForm.prototype.write = function(output) {
  output.writeStructBegin('CleanerActivityForm');
  if (this.cleanerId !== null && this.cleanerId !== undefined) {
    output.writeFieldBegin('cleanerId', Thrift.Type.STRING, 1);
    output.writeString(this.cleanerId);
    output.writeFieldEnd();
  }
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.I32, 2);
    output.writeI32(this.activity);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 4);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 5);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

hc.models.CleanerActivityQuery = module.exports.CleanerActivityQuery = function(args) {
  this.cleanerId = null;
  this.activity = null;
  this.status = null;
  if (args) {
    if (args.cleanerId !== undefined && args.cleanerId !== null) {
      this.cleanerId = args.cleanerId;
    }
    if (args.activity !== undefined && args.activity !== null) {
      this.activity = args.activity;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
hc.models.CleanerActivityQuery.prototype = {};
hc.models.CleanerActivityQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cleanerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

hc.models.CleanerActivityQuery.prototype.write = function(output) {
  output.writeStructBegin('CleanerActivityQuery');
  if (this.cleanerId !== null && this.cleanerId !== undefined) {
    output.writeFieldBegin('cleanerId', Thrift.Type.STRING, 1);
    output.writeString(this.cleanerId);
    output.writeFieldEnd();
  }
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.I32, 2);
    output.writeI32(this.activity);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

hc.models.CleanerActivity = module.exports.CleanerActivity = function(args) {
  this.cleanerId = null;
  this.activity = null;
  this.createdAt = null;
  this.status = null;
  if (args) {
    if (args.cleanerId !== undefined && args.cleanerId !== null) {
      this.cleanerId = args.cleanerId;
    }
    if (args.activity !== undefined && args.activity !== null) {
      this.activity = args.activity;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
hc.models.CleanerActivity.prototype = {};
hc.models.CleanerActivity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cleanerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.activity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

hc.models.CleanerActivity.prototype.write = function(output) {
  output.writeStructBegin('CleanerActivity');
  if (this.cleanerId !== null && this.cleanerId !== undefined) {
    output.writeFieldBegin('cleanerId', Thrift.Type.STRING, 1);
    output.writeString(this.cleanerId);
    output.writeFieldEnd();
  }
  if (this.activity !== null && this.activity !== undefined) {
    output.writeFieldBegin('activity', Thrift.Type.I32, 2);
    output.writeI32(this.activity);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 4);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 5);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

