//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof vv === 'undefined') {
  vv = {};
}
if (typeof vv.models === 'undefined') {
  vv.models = {};
}
vv.models.ClientIdInsert = module.exports.ClientIdInsert = function(args) {
  this.clientId = null;
  this.status = null;
  this.createdAt = null;
  this.expiry = null;
  this.applicationId = null;
  if (args) {
    if (args.clientId !== undefined && args.clientId !== null) {
      this.clientId = args.clientId;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.expiry !== undefined && args.expiry !== null) {
      this.expiry = args.expiry;
    }
    if (args.applicationId !== undefined && args.applicationId !== null) {
      this.applicationId = args.applicationId;
    }
  }
};
vv.models.ClientIdInsert.prototype = {};
vv.models.ClientIdInsert.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.expiry = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.applicationId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.ClientIdInsert.prototype.write = function(output) {
  output.writeStructBegin('ClientIdInsert');
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 1);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 3);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.expiry !== null && this.expiry !== undefined) {
    output.writeFieldBegin('expiry', Thrift.Type.I32, 4);
    output.writeI32(this.expiry);
    output.writeFieldEnd();
  }
  if (this.applicationId !== null && this.applicationId !== undefined) {
    output.writeFieldBegin('applicationId', Thrift.Type.I32, 5);
    output.writeI32(this.applicationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vv.models.ClientIdForm = module.exports.ClientIdForm = function(args) {
  this.clientId = null;
  this.expiry = null;
  this.applicationId = null;
  this.status = null;
  this.updatedAt = null;
  if (args) {
    if (args.clientId !== undefined && args.clientId !== null) {
      this.clientId = args.clientId;
    }
    if (args.expiry !== undefined && args.expiry !== null) {
      this.expiry = args.expiry;
    }
    if (args.applicationId !== undefined && args.applicationId !== null) {
      this.applicationId = args.applicationId;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.updatedAt !== undefined && args.updatedAt !== null) {
      this.updatedAt = args.updatedAt;
    }
  }
};
vv.models.ClientIdForm.prototype = {};
vv.models.ClientIdForm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.expiry = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.applicationId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.updatedAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.ClientIdForm.prototype.write = function(output) {
  output.writeStructBegin('ClientIdForm');
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 1);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.expiry !== null && this.expiry !== undefined) {
    output.writeFieldBegin('expiry', Thrift.Type.I32, 2);
    output.writeI32(this.expiry);
    output.writeFieldEnd();
  }
  if (this.applicationId !== null && this.applicationId !== undefined) {
    output.writeFieldBegin('applicationId', Thrift.Type.I32, 3);
    output.writeI32(this.applicationId);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.updatedAt !== null && this.updatedAt !== undefined) {
    output.writeFieldBegin('updatedAt', Thrift.Type.STRING, 5);
    output.writeString(this.updatedAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vv.models.ClientId = module.exports.ClientId = function(args) {
  this.clientId = null;
  this.expiry = null;
  this.applicationId = null;
  if (args) {
    if (args.clientId !== undefined && args.clientId !== null) {
      this.clientId = args.clientId;
    }
    if (args.expiry !== undefined && args.expiry !== null) {
      this.expiry = args.expiry;
    }
    if (args.applicationId !== undefined && args.applicationId !== null) {
      this.applicationId = args.applicationId;
    }
  }
};
vv.models.ClientId.prototype = {};
vv.models.ClientId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.expiry = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.applicationId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.ClientId.prototype.write = function(output) {
  output.writeStructBegin('ClientId');
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 1);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  if (this.expiry !== null && this.expiry !== undefined) {
    output.writeFieldBegin('expiry', Thrift.Type.I32, 2);
    output.writeI32(this.expiry);
    output.writeFieldEnd();
  }
  if (this.applicationId !== null && this.applicationId !== undefined) {
    output.writeFieldBegin('applicationId', Thrift.Type.I32, 3);
    output.writeI32(this.applicationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vv.models.ClientIdQuery = module.exports.ClientIdQuery = function(args) {
  this.clientId = null;
  if (args) {
    if (args.clientId !== undefined && args.clientId !== null) {
      this.clientId = args.clientId;
    }
  }
};
vv.models.ClientIdQuery.prototype = {};
vv.models.ClientIdQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.clientId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.ClientIdQuery.prototype.write = function(output) {
  output.writeStructBegin('ClientIdQuery');
  if (this.clientId !== null && this.clientId !== undefined) {
    output.writeFieldBegin('clientId', Thrift.Type.STRING, 1);
    output.writeString(this.clientId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

