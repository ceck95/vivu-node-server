//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof vv === 'undefined') {
  vv = {};
}
if (typeof vv.models === 'undefined') {
  vv.models = {};
}
vv.models.QuotePayment = module.exports.QuotePayment = function(args) {
  this.id = null;
  this.quoteId = null;
  this.method = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.quoteId !== undefined && args.quoteId !== null) {
      this.quoteId = args.quoteId;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
  }
};
vv.models.QuotePayment.prototype = {};
vv.models.QuotePayment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.quoteId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.QuotePayment.prototype.write = function(output) {
  output.writeStructBegin('QuotePayment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.quoteId !== null && this.quoteId !== undefined) {
    output.writeFieldBegin('quoteId', Thrift.Type.I32, 2);
    output.writeI32(this.quoteId);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 3);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vv.models.QuotePaymentInsert = module.exports.QuotePaymentInsert = function(args) {
  this.quoteId = null;
  this.method = null;
  if (args) {
    if (args.quoteId !== undefined && args.quoteId !== null) {
      this.quoteId = args.quoteId;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
  }
};
vv.models.QuotePaymentInsert.prototype = {};
vv.models.QuotePaymentInsert.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.quoteId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.QuotePaymentInsert.prototype.write = function(output) {
  output.writeStructBegin('QuotePaymentInsert');
  if (this.quoteId !== null && this.quoteId !== undefined) {
    output.writeFieldBegin('quoteId', Thrift.Type.I32, 1);
    output.writeI32(this.quoteId);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 2);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

vv.models.QuotePaymentForm = module.exports.QuotePaymentForm = function(args) {
  this.id = null;
  this.quoteId = null;
  this.method = null;
  this.status = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.quoteId !== undefined && args.quoteId !== null) {
      this.quoteId = args.quoteId;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
vv.models.QuotePaymentForm.prototype = {};
vv.models.QuotePaymentForm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.quoteId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vv.models.QuotePaymentForm.prototype.write = function(output) {
  output.writeStructBegin('QuotePaymentForm');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.quoteId !== null && this.quoteId !== undefined) {
    output.writeFieldBegin('quoteId', Thrift.Type.I32, 2);
    output.writeI32(this.quoteId);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 3);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

