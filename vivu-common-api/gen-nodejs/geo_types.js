//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof nexx === 'undefined') {
  nexx = {};
}
if (typeof nexx.shared === 'undefined') {
  nexx.shared = {};
}
nexx.shared.GeoPoint = module.exports.GeoPoint = function(args) {
  this.type = 'Point';
  this.coordinates = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.coordinates !== undefined && args.coordinates !== null) {
      this.coordinates = Thrift.copyList(args.coordinates, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field coordinates is unset!');
    }
  }
};
nexx.shared.GeoPoint.prototype = {};
nexx.shared.GeoPoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.coordinates = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readDouble();
          this.coordinates.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.GeoPoint.prototype.write = function(output) {
  output.writeStructBegin('GeoPoint');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.coordinates.length);
    for (var iter7 in this.coordinates)
    {
      if (this.coordinates.hasOwnProperty(iter7))
      {
        iter7 = this.coordinates[iter7];
        output.writeDouble(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.shared.QueryNearPoint = module.exports.QueryNearPoint = function(args) {
  this.geometry = null;
  this.maxDistance = null;
  this.minDistance = null;
  this.duration = 5;
  this.visibleOnly = true;
  if (args) {
    if (args.geometry !== undefined && args.geometry !== null) {
      this.geometry = new ttypes.GeoPoint(args.geometry);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field geometry is unset!');
    }
    if (args.maxDistance !== undefined && args.maxDistance !== null) {
      this.maxDistance = args.maxDistance;
    }
    if (args.minDistance !== undefined && args.minDistance !== null) {
      this.minDistance = args.minDistance;
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    }
    if (args.visibleOnly !== undefined && args.visibleOnly !== null) {
      this.visibleOnly = args.visibleOnly;
    }
  }
};
nexx.shared.QueryNearPoint.prototype = {};
nexx.shared.QueryNearPoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.geometry = new ttypes.GeoPoint();
        this.geometry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maxDistance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.minDistance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.duration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.visibleOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.QueryNearPoint.prototype.write = function(output) {
  output.writeStructBegin('QueryNearPoint');
  if (this.geometry !== null && this.geometry !== undefined) {
    output.writeFieldBegin('geometry', Thrift.Type.STRUCT, 1);
    this.geometry.write(output);
    output.writeFieldEnd();
  }
  if (this.maxDistance !== null && this.maxDistance !== undefined) {
    output.writeFieldBegin('maxDistance', Thrift.Type.I32, 2);
    output.writeI32(this.maxDistance);
    output.writeFieldEnd();
  }
  if (this.minDistance !== null && this.minDistance !== undefined) {
    output.writeFieldBegin('minDistance', Thrift.Type.I32, 3);
    output.writeI32(this.minDistance);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I32, 4);
    output.writeI32(this.duration);
    output.writeFieldEnd();
  }
  if (this.visibleOnly !== null && this.visibleOnly !== undefined) {
    output.writeFieldBegin('visibleOnly', Thrift.Type.BOOL, 5);
    output.writeBool(this.visibleOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

